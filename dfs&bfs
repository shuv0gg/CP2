#include <iostream>
#include <vector>
#include <queue>
#include <stack>

using namespace std;

vector<vector<int>> graph;
vector<bool> visited;

// BFS Function
void bfs(int start, int V) {
    visited.assign(V, false);
    queue<int> q;
    q.push(start);
    visited[start] = true;

    cout << "BFS Traversal: ";
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";

        for (int neighbor : graph[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
    cout << endl;
}

// DFS Function
void dfs(int node, int V) {
    visited[node] = true;
    cout << node << " ";

    for (int neighbor : graph[node]) {
        if (!visited[neighbor])
            dfs(neighbor, V);
    }
}

int main() {
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V;
    cout << "Enter number of edges: ";
    cin >> E;

    graph.resize(V);
    visited.resize(V, false);

    cout << "Enter edges (u v) where u â†’ v:\n";
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        // For undirected graph, also add: graph[v].push_back(u);
    }

    int start;
    cout << "Enter starting node for traversal: ";
    cin >> start;

    bfs(start, V);

    visited.assign(V, false);
    cout << "DFS Traversal: ";
    dfs(start, V);
    cout << endl;

    return 0;
}
